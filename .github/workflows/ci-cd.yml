name: CI/CD

env:
  IMAGE_NAME: bungeecord

on:
  push:
    branches:
      - master
      - develop

  # Run tests for any PRs.
  pull_request:

  workflow_dispatch:
    inputs:
      version:
        description: "Version of BungeeCord"
        required: true
        default: "latest"

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Figure out correct MC version
          BUNGEECORD_JOB_ID=lastStableBuild

          if [ "$VERSION" != "master" ] && [ "$VERSION" != "develop" ]; then
              BUNGEECORD_JOB_ID=$VERSION
          fi

          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.version }}" != "latest" ]; then
              BUNGEECORD_JOB_ID=${{ github.event.inputs.version }}
          fi

          echo "VERSION=$VERSION"
          echo "BUNGEECORD_JOB_ID=$BUNGEECORD_JOB_ID"
          echo "::set-env name=BUNGEECORD_JOB_ID::$BUNGEECORD_JOB_ID"

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile --build-arg "BUNGEECORD_JOB_ID=$BUNGEECORD_JOB_ID"
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    # needs: test

    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          IMAGE_ID=${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Figure out correct BungeeCord version
          BUNGEECORD_JOB_ID=lastStableBuild

          if [ "$VERSION" == "master" ]; then
              DOCKER_VERSION=latest
          elif [ "$VERSION" == "develop" ]; then
              DOCKER_VERSION=nightly
          else
              SPIGOT_VERSION=$VERSION
              DOCKER_VERSION=$VERSION
          fi

          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.version }}" == "latest" ]; then
              if [ "$VERSION" == "master" ]; then
                  DOCKER_VERSION=latest
              elif [ "$VERSION" == "develop" ]; then
                  DOCKER_VERSION=nightly
              fi
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              BUNGEECORD_JOB_ID=${{ github.event.inputs.version }}
              DOCKER_VERSION=${{ github.event.inputs.version }}
          fi

          echo "IMAGE_ID=$IMAGE_ID"
          echo "::set-env name=IMAGE_ID::$IMAGE_ID"
          echo "BUNGEECORD_JOB_ID=$BUNGEECORD_JOB_ID"
          echo "::set-env name=BUNGEECORD_JOB_ID::$BUNGEECORD_JOB_ID"
          echo "DOCKER_VERSION=$DOCKER_VERSION"
          echo "::set-env name=DOCKER_VERSION::$DOCKER_VERSION"

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --build-arg "BUNGEECORD_JOB_ID=$BUNGEECORD_JOB_ID"

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push image to Docker Hub
        run: |
          docker tag $IMAGE_NAME $IMAGE_ID:$DOCKER_VERSION
          docker push $IMAGE_ID:$DOCKER_VERSION
